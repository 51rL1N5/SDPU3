// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/15/2018 16:30:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Secador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Secador_vlg_sample_tst(
	CLK,
	CSK,
	DATA_MOSI,
	doria,
	FINISH,
	HALT,
	sampler_tx
);
input  CLK;
input  CSK;
input  DATA_MOSI;
input [7:0] doria;
input  FINISH;
input  HALT;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CSK or DATA_MOSI or doria or FINISH or HALT)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Secador_vlg_check_tst (
	bambam,
	DATA_MISO,
	higor,
	sampler_rx
);
input  bambam;
input  DATA_MISO;
input [7:0] higor;
input sampler_rx;

reg  bambam_expected;
reg  DATA_MISO_expected;
reg [7:0] higor_expected;

reg  bambam_prev;
reg  DATA_MISO_prev;
reg [7:0] higor_prev;

reg  bambam_expected_prev;
reg  DATA_MISO_expected_prev;
reg [7:0] higor_expected_prev;

reg  last_bambam_exp;
reg  last_DATA_MISO_exp;
reg [7:0] last_higor_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	bambam_prev = bambam;
	DATA_MISO_prev = DATA_MISO;
	higor_prev = higor;
end

// update expected /o prevs

always @(trigger)
begin
	bambam_expected_prev = bambam_expected;
	DATA_MISO_expected_prev = DATA_MISO_expected;
	higor_expected_prev = higor_expected;
end



// expected DATA_MISO
initial
begin
	DATA_MISO_expected = 1'bX;
end 
// expected higor[ 7 ]
initial
begin
	higor_expected[7] = 1'bX;
end 
// expected higor[ 6 ]
initial
begin
	higor_expected[6] = 1'bX;
end 
// expected higor[ 5 ]
initial
begin
	higor_expected[5] = 1'bX;
end 
// expected higor[ 4 ]
initial
begin
	higor_expected[4] = 1'bX;
end 
// expected higor[ 3 ]
initial
begin
	higor_expected[3] = 1'bX;
end 
// expected higor[ 2 ]
initial
begin
	higor_expected[2] = 1'bX;
end 
// expected higor[ 1 ]
initial
begin
	higor_expected[1] = 1'bX;
end 
// expected higor[ 0 ]
initial
begin
	higor_expected[0] = 1'bX;
end 

// expected bambam
initial
begin
	bambam_expected = 1'bX;
end 
// generate trigger
always @(bambam_expected or bambam or DATA_MISO_expected or DATA_MISO or higor_expected or higor)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bambam = %b | expected DATA_MISO = %b | expected higor = %b | ",bambam_expected_prev,DATA_MISO_expected_prev,higor_expected_prev);
	$display("| real bambam = %b | real DATA_MISO = %b | real higor = %b | ",bambam_prev,DATA_MISO_prev,higor_prev);
`endif
	if (
		( bambam_expected_prev !== 1'bx ) && ( bambam_prev !== bambam_expected_prev )
		&& ((bambam_expected_prev !== last_bambam_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bambam :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bambam_expected_prev);
		$display ("     Real value = %b", bambam_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bambam_exp = bambam_expected_prev;
	end
	if (
		( DATA_MISO_expected_prev !== 1'bx ) && ( DATA_MISO_prev !== DATA_MISO_expected_prev )
		&& ((DATA_MISO_expected_prev !== last_DATA_MISO_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MISO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MISO_expected_prev);
		$display ("     Real value = %b", DATA_MISO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MISO_exp = DATA_MISO_expected_prev;
	end
	if (
		( higor_expected_prev[0] !== 1'bx ) && ( higor_prev[0] !== higor_expected_prev[0] )
		&& ((higor_expected_prev[0] !== last_higor_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port higor[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", higor_expected_prev);
		$display ("     Real value = %b", higor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_higor_exp[0] = higor_expected_prev[0];
	end
	if (
		( higor_expected_prev[1] !== 1'bx ) && ( higor_prev[1] !== higor_expected_prev[1] )
		&& ((higor_expected_prev[1] !== last_higor_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port higor[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", higor_expected_prev);
		$display ("     Real value = %b", higor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_higor_exp[1] = higor_expected_prev[1];
	end
	if (
		( higor_expected_prev[2] !== 1'bx ) && ( higor_prev[2] !== higor_expected_prev[2] )
		&& ((higor_expected_prev[2] !== last_higor_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port higor[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", higor_expected_prev);
		$display ("     Real value = %b", higor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_higor_exp[2] = higor_expected_prev[2];
	end
	if (
		( higor_expected_prev[3] !== 1'bx ) && ( higor_prev[3] !== higor_expected_prev[3] )
		&& ((higor_expected_prev[3] !== last_higor_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port higor[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", higor_expected_prev);
		$display ("     Real value = %b", higor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_higor_exp[3] = higor_expected_prev[3];
	end
	if (
		( higor_expected_prev[4] !== 1'bx ) && ( higor_prev[4] !== higor_expected_prev[4] )
		&& ((higor_expected_prev[4] !== last_higor_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port higor[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", higor_expected_prev);
		$display ("     Real value = %b", higor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_higor_exp[4] = higor_expected_prev[4];
	end
	if (
		( higor_expected_prev[5] !== 1'bx ) && ( higor_prev[5] !== higor_expected_prev[5] )
		&& ((higor_expected_prev[5] !== last_higor_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port higor[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", higor_expected_prev);
		$display ("     Real value = %b", higor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_higor_exp[5] = higor_expected_prev[5];
	end
	if (
		( higor_expected_prev[6] !== 1'bx ) && ( higor_prev[6] !== higor_expected_prev[6] )
		&& ((higor_expected_prev[6] !== last_higor_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port higor[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", higor_expected_prev);
		$display ("     Real value = %b", higor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_higor_exp[6] = higor_expected_prev[6];
	end
	if (
		( higor_expected_prev[7] !== 1'bx ) && ( higor_prev[7] !== higor_expected_prev[7] )
		&& ((higor_expected_prev[7] !== last_higor_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port higor[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", higor_expected_prev);
		$display ("     Real value = %b", higor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_higor_exp[7] = higor_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Secador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CSK;
reg DATA_MOSI;
reg [7:0] doria;
reg FINISH;
reg HALT;
// wires                                               
wire bambam;
wire DATA_MISO;
wire [7:0] higor;

wire sampler;                             

// assign statements (if any)                          
Secador i1 (
// port map - connection between master ports and signals/registers   
	.bambam(bambam),
	.CLK(CLK),
	.CSK(CSK),
	.DATA_MISO(DATA_MISO),
	.DATA_MOSI(DATA_MOSI),
	.doria(doria),
	.FINISH(FINISH),
	.HALT(HALT),
	.higor(higor)
);

// CSK
initial
begin
	CSK = 1'b0;
	CSK = #100000 1'b1;
	# 20000;
	repeat(22)
	begin
		CSK = 1'b0;
		CSK = #20000 1'b1;
		# 20000;
	end
end 
// doria[ 7 ]
initial
begin
	doria[7] = 1'b1;
	doria[7] = #520000 1'b0;
end 
// doria[ 6 ]
initial
begin
	doria[6] = 1'b1;
	doria[6] = #520000 1'b0;
end 
// doria[ 5 ]
initial
begin
	doria[5] = 1'b0;
end 
// doria[ 4 ]
initial
begin
	doria[4] = 1'b1;
end 
// doria[ 3 ]
initial
begin
	doria[3] = 1'b0;
	doria[3] = #520000 1'b1;
end 
// doria[ 2 ]
initial
begin
	doria[2] = 1'b1;
	doria[2] = #520000 1'b0;
end 
// doria[ 1 ]
initial
begin
	doria[1] = 1'b0;
end 
// doria[ 0 ]
initial
begin
	doria[0] = 1'b1;
	doria[0] = #520000 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

Secador_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CSK(CSK),
	.DATA_MOSI(DATA_MOSI),
	.doria(doria),
	.FINISH(FINISH),
	.HALT(HALT),
	.sampler_tx(sampler)
);

Secador_vlg_check_tst tb_out(
	.bambam(bambam),
	.DATA_MISO(DATA_MISO),
	.higor(higor),
	.sampler_rx(sampler)
);
endmodule


// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2018 12:46:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Secador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Secador_vlg_sample_tst(
	CLK,
	CSK,
	DATA_MOSI,
	FINISH,
	HALT,
	load_pin,
	sampler_tx
);
input  CLK;
input  CSK;
input  DATA_MOSI;
input  FINISH;
input  HALT;
input  load_pin;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CSK or DATA_MOSI or FINISH or HALT or load_pin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Secador_vlg_check_tst (
	DATA_MISO,
	sampler_rx
);
input  DATA_MISO;
input sampler_rx;

reg  DATA_MISO_expected;

reg  DATA_MISO_prev;

reg  DATA_MISO_expected_prev;

reg  last_DATA_MISO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	DATA_MISO_prev = DATA_MISO;
end

// update expected /o prevs

always @(trigger)
begin
	DATA_MISO_expected_prev = DATA_MISO_expected;
end



// expected DATA_MISO
initial
begin
	DATA_MISO_expected = 1'bX;
end 
// generate trigger
always @(DATA_MISO_expected or DATA_MISO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DATA_MISO = %b | ",DATA_MISO_expected_prev);
	$display("| real DATA_MISO = %b | ",DATA_MISO_prev);
`endif
	if (
		( DATA_MISO_expected_prev !== 1'bx ) && ( DATA_MISO_prev !== DATA_MISO_expected_prev )
		&& ((DATA_MISO_expected_prev !== last_DATA_MISO_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MISO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MISO_expected_prev);
		$display ("     Real value = %b", DATA_MISO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_MISO_exp = DATA_MISO_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Secador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CSK;
reg DATA_MOSI;
reg FINISH;
reg HALT;
reg load_pin;
// wires                                               
wire DATA_MISO;

wire sampler;                             

// assign statements (if any)                          
Secador i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CSK(CSK),
	.DATA_MISO(DATA_MISO),
	.DATA_MOSI(DATA_MOSI),
	.FINISH(FINISH),
	.HALT(HALT),
	.load_pin(load_pin)
);

// CSK
initial
begin
	CSK = 1'b0;
	CSK = #100000 1'b1;
	# 20000;
	repeat(7)
	begin
		CSK = 1'b0;
		CSK = #20000 1'b1;
		# 20000;
	end
	CSK = 1'b0;
	CSK = #100000 1'b1;
	# 20000;
	repeat(11)
	begin
		CSK = 1'b0;
		CSK = #20000 1'b1;
		# 20000;
	end
	CSK = 1'b0;
	CSK = #20000 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// load_pin
initial
begin
	load_pin = 1'b1;
	load_pin = #40000 1'b0;
end 

Secador_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CSK(CSK),
	.DATA_MOSI(DATA_MOSI),
	.FINISH(FINISH),
	.HALT(HALT),
	.load_pin(load_pin),
	.sampler_tx(sampler)
);

Secador_vlg_check_tst tb_out(
	.DATA_MISO(DATA_MISO),
	.sampler_rx(sampler)
);
endmodule


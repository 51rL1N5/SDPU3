// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2018 16:34:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Secador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Secador_vlg_sample_tst(
	CLK,
	CSK,
	DATA_MOSI,
	FINISH,
	sampler_tx
);
input  CLK;
input  CSK;
input  DATA_MOSI;
input  FINISH;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CSK or DATA_MOSI or FINISH)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Secador_vlg_check_tst (
	S1,
	S2,
	sampler_rx
);
input [9:0] S1;
input [9:0] S2;
input sampler_rx;

reg [9:0] S1_expected;
reg [9:0] S2_expected;

reg [9:0] S1_prev;
reg [9:0] S2_prev;

reg [9:0] S1_expected_prev;
reg [9:0] S2_expected_prev;

reg [9:0] last_S1_exp;
reg [9:0] last_S2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	S1_prev = S1;
	S2_prev = S2;
end

// update expected /o prevs

always @(trigger)
begin
	S1_expected_prev = S1_expected;
	S2_expected_prev = S2_expected;
end


// expected S1[ 9 ]
initial
begin
	S1_expected[9] = 1'bX;
end 
// expected S1[ 8 ]
initial
begin
	S1_expected[8] = 1'bX;
end 
// expected S1[ 7 ]
initial
begin
	S1_expected[7] = 1'bX;
end 
// expected S1[ 6 ]
initial
begin
	S1_expected[6] = 1'bX;
end 
// expected S1[ 5 ]
initial
begin
	S1_expected[5] = 1'bX;
end 
// expected S1[ 4 ]
initial
begin
	S1_expected[4] = 1'bX;
end 
// expected S1[ 3 ]
initial
begin
	S1_expected[3] = 1'bX;
end 
// expected S1[ 2 ]
initial
begin
	S1_expected[2] = 1'bX;
end 
// expected S1[ 1 ]
initial
begin
	S1_expected[1] = 1'bX;
end 
// expected S1[ 0 ]
initial
begin
	S1_expected[0] = 1'bX;
end 
// expected S2[ 9 ]
initial
begin
	S2_expected[9] = 1'bX;
end 
// expected S2[ 8 ]
initial
begin
	S2_expected[8] = 1'bX;
end 
// expected S2[ 7 ]
initial
begin
	S2_expected[7] = 1'bX;
end 
// expected S2[ 6 ]
initial
begin
	S2_expected[6] = 1'bX;
end 
// expected S2[ 5 ]
initial
begin
	S2_expected[5] = 1'bX;
end 
// expected S2[ 4 ]
initial
begin
	S2_expected[4] = 1'bX;
end 
// expected S2[ 3 ]
initial
begin
	S2_expected[3] = 1'bX;
end 
// expected S2[ 2 ]
initial
begin
	S2_expected[2] = 1'bX;
end 
// expected S2[ 1 ]
initial
begin
	S2_expected[1] = 1'bX;
end 
// expected S2[ 0 ]
initial
begin
	S2_expected[0] = 1'bX;
end 
// generate trigger
always @(S1_expected or S1 or S2_expected or S2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected S1 = %b | expected S2 = %b | ",S1_expected_prev,S2_expected_prev);
	$display("| real S1 = %b | real S2 = %b | ",S1_prev,S2_prev);
`endif
	if (
		( S1_expected_prev[0] !== 1'bx ) && ( S1_prev[0] !== S1_expected_prev[0] )
		&& ((S1_expected_prev[0] !== last_S1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S1_exp[0] = S1_expected_prev[0];
	end
	if (
		( S1_expected_prev[1] !== 1'bx ) && ( S1_prev[1] !== S1_expected_prev[1] )
		&& ((S1_expected_prev[1] !== last_S1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S1_exp[1] = S1_expected_prev[1];
	end
	if (
		( S1_expected_prev[2] !== 1'bx ) && ( S1_prev[2] !== S1_expected_prev[2] )
		&& ((S1_expected_prev[2] !== last_S1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S1_exp[2] = S1_expected_prev[2];
	end
	if (
		( S1_expected_prev[3] !== 1'bx ) && ( S1_prev[3] !== S1_expected_prev[3] )
		&& ((S1_expected_prev[3] !== last_S1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S1_exp[3] = S1_expected_prev[3];
	end
	if (
		( S1_expected_prev[4] !== 1'bx ) && ( S1_prev[4] !== S1_expected_prev[4] )
		&& ((S1_expected_prev[4] !== last_S1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S1_exp[4] = S1_expected_prev[4];
	end
	if (
		( S1_expected_prev[5] !== 1'bx ) && ( S1_prev[5] !== S1_expected_prev[5] )
		&& ((S1_expected_prev[5] !== last_S1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S1_exp[5] = S1_expected_prev[5];
	end
	if (
		( S1_expected_prev[6] !== 1'bx ) && ( S1_prev[6] !== S1_expected_prev[6] )
		&& ((S1_expected_prev[6] !== last_S1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S1_exp[6] = S1_expected_prev[6];
	end
	if (
		( S1_expected_prev[7] !== 1'bx ) && ( S1_prev[7] !== S1_expected_prev[7] )
		&& ((S1_expected_prev[7] !== last_S1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S1_exp[7] = S1_expected_prev[7];
	end
	if (
		( S1_expected_prev[8] !== 1'bx ) && ( S1_prev[8] !== S1_expected_prev[8] )
		&& ((S1_expected_prev[8] !== last_S1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S1_exp[8] = S1_expected_prev[8];
	end
	if (
		( S1_expected_prev[9] !== 1'bx ) && ( S1_prev[9] !== S1_expected_prev[9] )
		&& ((S1_expected_prev[9] !== last_S1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S1_exp[9] = S1_expected_prev[9];
	end
	if (
		( S2_expected_prev[0] !== 1'bx ) && ( S2_prev[0] !== S2_expected_prev[0] )
		&& ((S2_expected_prev[0] !== last_S2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S2_exp[0] = S2_expected_prev[0];
	end
	if (
		( S2_expected_prev[1] !== 1'bx ) && ( S2_prev[1] !== S2_expected_prev[1] )
		&& ((S2_expected_prev[1] !== last_S2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S2_exp[1] = S2_expected_prev[1];
	end
	if (
		( S2_expected_prev[2] !== 1'bx ) && ( S2_prev[2] !== S2_expected_prev[2] )
		&& ((S2_expected_prev[2] !== last_S2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S2_exp[2] = S2_expected_prev[2];
	end
	if (
		( S2_expected_prev[3] !== 1'bx ) && ( S2_prev[3] !== S2_expected_prev[3] )
		&& ((S2_expected_prev[3] !== last_S2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S2_exp[3] = S2_expected_prev[3];
	end
	if (
		( S2_expected_prev[4] !== 1'bx ) && ( S2_prev[4] !== S2_expected_prev[4] )
		&& ((S2_expected_prev[4] !== last_S2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S2_exp[4] = S2_expected_prev[4];
	end
	if (
		( S2_expected_prev[5] !== 1'bx ) && ( S2_prev[5] !== S2_expected_prev[5] )
		&& ((S2_expected_prev[5] !== last_S2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S2_exp[5] = S2_expected_prev[5];
	end
	if (
		( S2_expected_prev[6] !== 1'bx ) && ( S2_prev[6] !== S2_expected_prev[6] )
		&& ((S2_expected_prev[6] !== last_S2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S2_exp[6] = S2_expected_prev[6];
	end
	if (
		( S2_expected_prev[7] !== 1'bx ) && ( S2_prev[7] !== S2_expected_prev[7] )
		&& ((S2_expected_prev[7] !== last_S2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S2_exp[7] = S2_expected_prev[7];
	end
	if (
		( S2_expected_prev[8] !== 1'bx ) && ( S2_prev[8] !== S2_expected_prev[8] )
		&& ((S2_expected_prev[8] !== last_S2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S2_exp[8] = S2_expected_prev[8];
	end
	if (
		( S2_expected_prev[9] !== 1'bx ) && ( S2_prev[9] !== S2_expected_prev[9] )
		&& ((S2_expected_prev[9] !== last_S2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S2_exp[9] = S2_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Secador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CSK;
reg DATA_MOSI;
reg FINISH;
// wires                                               
wire [9:0] S1;
wire [9:0] S2;

wire sampler;                             

// assign statements (if any)                          
Secador i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CSK(CSK),
	.DATA_MOSI(DATA_MOSI),
	.FINISH(FINISH),
	.S1(S1),
	.S2(S2)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// CSK
initial
begin
	repeat(10)
	begin
		CSK = 1'b0;
		CSK = #20000 1'b1;
		# 20000;
	end
	CSK = 1'b0;
	CSK = #60000 1'b1;
	# 20000;
	repeat(9)
	begin
		CSK = 1'b0;
		CSK = #20000 1'b1;
		# 20000;
	end
	CSK = 1'b0;
end 

// DATA_MOSI
initial
begin
	DATA_MOSI = 1'b0;
	DATA_MOSI = #10000 1'b1;
	DATA_MOSI = #30000 1'b0;
	DATA_MOSI = #330000 1'b1;
	DATA_MOSI = #30000 1'b0;
	DATA_MOSI = #210000 1'b1;
	DATA_MOSI = #30000 1'b0;
	DATA_MOSI = #10000 1'b1;
	DATA_MOSI = #30000 1'b0;
end 

// FINISH
initial
begin
	FINISH = 1'b0;
	FINISH = #420000 1'b1;
	FINISH = #20000 1'b0;
	FINISH = #420000 1'b1;
	FINISH = #20000 1'b0;
end 

Secador_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CSK(CSK),
	.DATA_MOSI(DATA_MOSI),
	.FINISH(FINISH),
	.sampler_tx(sampler)
);

Secador_vlg_check_tst tb_out(
	.S1(S1),
	.S2(S2),
	.sampler_rx(sampler)
);
endmodule


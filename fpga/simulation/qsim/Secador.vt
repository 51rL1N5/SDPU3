// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2018 16:21:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Secador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Secador_vlg_sample_tst(
	CLK,
	CSK,
	DATA_MOSI,
	FINISH,
	sampler_tx
);
input  CLK;
input  CSK;
input  DATA_MOSI;
input  FINISH;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CSK or DATA_MOSI or FINISH)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Secador_vlg_check_tst (
	pwmC,
	Xs,
	sampler_rx
);
input  pwmC;
input [31:0] Xs;
input sampler_rx;

reg  pwmC_expected;
reg [31:0] Xs_expected;

reg  pwmC_prev;
reg [31:0] Xs_prev;

reg  pwmC_expected_prev;
reg [31:0] Xs_expected_prev;

reg  last_pwmC_exp;
reg [31:0] last_Xs_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	pwmC_prev = pwmC;
	Xs_prev = Xs;
end

// update expected /o prevs

always @(trigger)
begin
	pwmC_expected_prev = pwmC_expected;
	Xs_expected_prev = Xs_expected;
end


// expected Xs[ 31 ]
initial
begin
	Xs_expected[31] = 1'bX;
	Xs_expected[31] = #1999000 1'b0;
end 
// expected Xs[ 30 ]
initial
begin
	Xs_expected[30] = 1'bX;
	Xs_expected[30] = #1999000 1'b0;
end 
// expected Xs[ 29 ]
initial
begin
	Xs_expected[29] = 1'bX;
	Xs_expected[29] = #1999000 1'b0;
end 
// expected Xs[ 28 ]
initial
begin
	Xs_expected[28] = 1'bX;
	Xs_expected[28] = #1999000 1'b0;
end 
// expected Xs[ 27 ]
initial
begin
	Xs_expected[27] = 1'bX;
	Xs_expected[27] = #1999000 1'b0;
end 
// expected Xs[ 26 ]
initial
begin
	Xs_expected[26] = 1'bX;
	Xs_expected[26] = #1999000 1'b0;
end 
// expected Xs[ 25 ]
initial
begin
	Xs_expected[25] = 1'bX;
	Xs_expected[25] = #1999000 1'b0;
end 
// expected Xs[ 24 ]
initial
begin
	Xs_expected[24] = 1'bX;
	Xs_expected[24] = #1999000 1'b0;
end 
// expected Xs[ 23 ]
initial
begin
	Xs_expected[23] = 1'bX;
	Xs_expected[23] = #1999000 1'b0;
end 
// expected Xs[ 22 ]
initial
begin
	Xs_expected[22] = 1'bX;
	Xs_expected[22] = #1999000 1'b0;
end 
// expected Xs[ 21 ]
initial
begin
	Xs_expected[21] = 1'bX;
	Xs_expected[21] = #1999000 1'b0;
end 
// expected Xs[ 20 ]
initial
begin
	Xs_expected[20] = 1'bX;
	Xs_expected[20] = #1999000 1'b0;
end 
// expected Xs[ 19 ]
initial
begin
	Xs_expected[19] = 1'bX;
	Xs_expected[19] = #1999000 1'b0;
end 
// expected Xs[ 18 ]
initial
begin
	Xs_expected[18] = 1'bX;
	Xs_expected[18] = #1999000 1'b0;
end 
// expected Xs[ 17 ]
initial
begin
	Xs_expected[17] = 1'bX;
	Xs_expected[17] = #1999000 1'b0;
end 
// expected Xs[ 16 ]
initial
begin
	Xs_expected[16] = 1'bX;
	Xs_expected[16] = #1999000 1'b0;
end 
// expected Xs[ 15 ]
initial
begin
	Xs_expected[15] = 1'bX;
	Xs_expected[15] = #1999000 1'b0;
end 
// expected Xs[ 14 ]
initial
begin
	Xs_expected[14] = 1'bX;
	Xs_expected[14] = #1999000 1'b0;
end 
// expected Xs[ 13 ]
initial
begin
	Xs_expected[13] = 1'bX;
	Xs_expected[13] = #1999000 1'b0;
end 
// expected Xs[ 12 ]
initial
begin
	Xs_expected[12] = 1'bX;
	Xs_expected[12] = #1999000 1'b0;
end 
// expected Xs[ 11 ]
initial
begin
	Xs_expected[11] = 1'bX;
	Xs_expected[11] = #1999000 1'b0;
end 
// expected Xs[ 10 ]
initial
begin
	Xs_expected[10] = 1'bX;
	Xs_expected[10] = #1999000 1'b0;
end 
// expected Xs[ 9 ]
initial
begin
	Xs_expected[9] = 1'bX;
	Xs_expected[9] = #1999000 1'b0;
end 
// expected Xs[ 8 ]
initial
begin
	Xs_expected[8] = 1'bX;
	Xs_expected[8] = #1999000 1'b0;
end 
// expected Xs[ 7 ]
initial
begin
	Xs_expected[7] = 1'bX;
	Xs_expected[7] = #1999000 1'b0;
end 
// expected Xs[ 6 ]
initial
begin
	Xs_expected[6] = 1'bX;
	Xs_expected[6] = #1999000 1'b0;
end 
// expected Xs[ 5 ]
initial
begin
	Xs_expected[5] = 1'bX;
	Xs_expected[5] = #1999000 1'b0;
end 
// expected Xs[ 4 ]
initial
begin
	Xs_expected[4] = 1'bX;
	Xs_expected[4] = #1999000 1'b0;
end 
// expected Xs[ 3 ]
initial
begin
	Xs_expected[3] = 1'bX;
	Xs_expected[3] = #1999000 1'b0;
end 
// expected Xs[ 2 ]
initial
begin
	Xs_expected[2] = 1'bX;
	Xs_expected[2] = #1999000 1'b0;
end 
// expected Xs[ 1 ]
initial
begin
	Xs_expected[1] = 1'bX;
	Xs_expected[1] = #1999000 1'b0;
end 
// expected Xs[ 0 ]
initial
begin
	Xs_expected[0] = 1'bX;
	Xs_expected[0] = #1999000 1'b0;
end 

// expected pwmC
initial
begin
	pwmC_expected = 1'bX;
	pwmC_expected = #4999000 1'b0;
end 
// generate trigger
always @(pwmC_expected or pwmC or Xs_expected or Xs)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pwmC = %b | expected Xs = %b | ",pwmC_expected_prev,Xs_expected_prev);
	$display("| real pwmC = %b | real Xs = %b | ",pwmC_prev,Xs_prev);
`endif
	if (
		( pwmC_expected_prev !== 1'bx ) && ( pwmC_prev !== pwmC_expected_prev )
		&& ((pwmC_expected_prev !== last_pwmC_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwmC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwmC_expected_prev);
		$display ("     Real value = %b", pwmC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pwmC_exp = pwmC_expected_prev;
	end
	if (
		( Xs_expected_prev[0] !== 1'bx ) && ( Xs_prev[0] !== Xs_expected_prev[0] )
		&& ((Xs_expected_prev[0] !== last_Xs_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[0] = Xs_expected_prev[0];
	end
	if (
		( Xs_expected_prev[1] !== 1'bx ) && ( Xs_prev[1] !== Xs_expected_prev[1] )
		&& ((Xs_expected_prev[1] !== last_Xs_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[1] = Xs_expected_prev[1];
	end
	if (
		( Xs_expected_prev[2] !== 1'bx ) && ( Xs_prev[2] !== Xs_expected_prev[2] )
		&& ((Xs_expected_prev[2] !== last_Xs_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[2] = Xs_expected_prev[2];
	end
	if (
		( Xs_expected_prev[3] !== 1'bx ) && ( Xs_prev[3] !== Xs_expected_prev[3] )
		&& ((Xs_expected_prev[3] !== last_Xs_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[3] = Xs_expected_prev[3];
	end
	if (
		( Xs_expected_prev[4] !== 1'bx ) && ( Xs_prev[4] !== Xs_expected_prev[4] )
		&& ((Xs_expected_prev[4] !== last_Xs_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[4] = Xs_expected_prev[4];
	end
	if (
		( Xs_expected_prev[5] !== 1'bx ) && ( Xs_prev[5] !== Xs_expected_prev[5] )
		&& ((Xs_expected_prev[5] !== last_Xs_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[5] = Xs_expected_prev[5];
	end
	if (
		( Xs_expected_prev[6] !== 1'bx ) && ( Xs_prev[6] !== Xs_expected_prev[6] )
		&& ((Xs_expected_prev[6] !== last_Xs_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[6] = Xs_expected_prev[6];
	end
	if (
		( Xs_expected_prev[7] !== 1'bx ) && ( Xs_prev[7] !== Xs_expected_prev[7] )
		&& ((Xs_expected_prev[7] !== last_Xs_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[7] = Xs_expected_prev[7];
	end
	if (
		( Xs_expected_prev[8] !== 1'bx ) && ( Xs_prev[8] !== Xs_expected_prev[8] )
		&& ((Xs_expected_prev[8] !== last_Xs_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[8] = Xs_expected_prev[8];
	end
	if (
		( Xs_expected_prev[9] !== 1'bx ) && ( Xs_prev[9] !== Xs_expected_prev[9] )
		&& ((Xs_expected_prev[9] !== last_Xs_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[9] = Xs_expected_prev[9];
	end
	if (
		( Xs_expected_prev[10] !== 1'bx ) && ( Xs_prev[10] !== Xs_expected_prev[10] )
		&& ((Xs_expected_prev[10] !== last_Xs_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[10] = Xs_expected_prev[10];
	end
	if (
		( Xs_expected_prev[11] !== 1'bx ) && ( Xs_prev[11] !== Xs_expected_prev[11] )
		&& ((Xs_expected_prev[11] !== last_Xs_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[11] = Xs_expected_prev[11];
	end
	if (
		( Xs_expected_prev[12] !== 1'bx ) && ( Xs_prev[12] !== Xs_expected_prev[12] )
		&& ((Xs_expected_prev[12] !== last_Xs_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[12] = Xs_expected_prev[12];
	end
	if (
		( Xs_expected_prev[13] !== 1'bx ) && ( Xs_prev[13] !== Xs_expected_prev[13] )
		&& ((Xs_expected_prev[13] !== last_Xs_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[13] = Xs_expected_prev[13];
	end
	if (
		( Xs_expected_prev[14] !== 1'bx ) && ( Xs_prev[14] !== Xs_expected_prev[14] )
		&& ((Xs_expected_prev[14] !== last_Xs_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[14] = Xs_expected_prev[14];
	end
	if (
		( Xs_expected_prev[15] !== 1'bx ) && ( Xs_prev[15] !== Xs_expected_prev[15] )
		&& ((Xs_expected_prev[15] !== last_Xs_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[15] = Xs_expected_prev[15];
	end
	if (
		( Xs_expected_prev[16] !== 1'bx ) && ( Xs_prev[16] !== Xs_expected_prev[16] )
		&& ((Xs_expected_prev[16] !== last_Xs_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[16] = Xs_expected_prev[16];
	end
	if (
		( Xs_expected_prev[17] !== 1'bx ) && ( Xs_prev[17] !== Xs_expected_prev[17] )
		&& ((Xs_expected_prev[17] !== last_Xs_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[17] = Xs_expected_prev[17];
	end
	if (
		( Xs_expected_prev[18] !== 1'bx ) && ( Xs_prev[18] !== Xs_expected_prev[18] )
		&& ((Xs_expected_prev[18] !== last_Xs_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[18] = Xs_expected_prev[18];
	end
	if (
		( Xs_expected_prev[19] !== 1'bx ) && ( Xs_prev[19] !== Xs_expected_prev[19] )
		&& ((Xs_expected_prev[19] !== last_Xs_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[19] = Xs_expected_prev[19];
	end
	if (
		( Xs_expected_prev[20] !== 1'bx ) && ( Xs_prev[20] !== Xs_expected_prev[20] )
		&& ((Xs_expected_prev[20] !== last_Xs_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[20] = Xs_expected_prev[20];
	end
	if (
		( Xs_expected_prev[21] !== 1'bx ) && ( Xs_prev[21] !== Xs_expected_prev[21] )
		&& ((Xs_expected_prev[21] !== last_Xs_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[21] = Xs_expected_prev[21];
	end
	if (
		( Xs_expected_prev[22] !== 1'bx ) && ( Xs_prev[22] !== Xs_expected_prev[22] )
		&& ((Xs_expected_prev[22] !== last_Xs_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[22] = Xs_expected_prev[22];
	end
	if (
		( Xs_expected_prev[23] !== 1'bx ) && ( Xs_prev[23] !== Xs_expected_prev[23] )
		&& ((Xs_expected_prev[23] !== last_Xs_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[23] = Xs_expected_prev[23];
	end
	if (
		( Xs_expected_prev[24] !== 1'bx ) && ( Xs_prev[24] !== Xs_expected_prev[24] )
		&& ((Xs_expected_prev[24] !== last_Xs_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[24] = Xs_expected_prev[24];
	end
	if (
		( Xs_expected_prev[25] !== 1'bx ) && ( Xs_prev[25] !== Xs_expected_prev[25] )
		&& ((Xs_expected_prev[25] !== last_Xs_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[25] = Xs_expected_prev[25];
	end
	if (
		( Xs_expected_prev[26] !== 1'bx ) && ( Xs_prev[26] !== Xs_expected_prev[26] )
		&& ((Xs_expected_prev[26] !== last_Xs_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[26] = Xs_expected_prev[26];
	end
	if (
		( Xs_expected_prev[27] !== 1'bx ) && ( Xs_prev[27] !== Xs_expected_prev[27] )
		&& ((Xs_expected_prev[27] !== last_Xs_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[27] = Xs_expected_prev[27];
	end
	if (
		( Xs_expected_prev[28] !== 1'bx ) && ( Xs_prev[28] !== Xs_expected_prev[28] )
		&& ((Xs_expected_prev[28] !== last_Xs_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[28] = Xs_expected_prev[28];
	end
	if (
		( Xs_expected_prev[29] !== 1'bx ) && ( Xs_prev[29] !== Xs_expected_prev[29] )
		&& ((Xs_expected_prev[29] !== last_Xs_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[29] = Xs_expected_prev[29];
	end
	if (
		( Xs_expected_prev[30] !== 1'bx ) && ( Xs_prev[30] !== Xs_expected_prev[30] )
		&& ((Xs_expected_prev[30] !== last_Xs_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[30] = Xs_expected_prev[30];
	end
	if (
		( Xs_expected_prev[31] !== 1'bx ) && ( Xs_prev[31] !== Xs_expected_prev[31] )
		&& ((Xs_expected_prev[31] !== last_Xs_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Xs[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Xs_expected_prev);
		$display ("     Real value = %b", Xs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Xs_exp[31] = Xs_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Secador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CSK;
reg DATA_MOSI;
reg FINISH;
// wires                                               
wire pwmC;
wire [31:0] Xs;

wire sampler;                             

// assign statements (if any)                          
Secador i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CSK(CSK),
	.DATA_MOSI(DATA_MOSI),
	.FINISH(FINISH),
	.pwmC(pwmC),
	.Xs(Xs)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #1000 1'b1;
	#1000;
end 

// CSK
initial
begin
	repeat(10)
	begin
		CSK = 1'b0;
		CSK = #20000 1'b1;
		# 20000;
	end
	CSK = 1'b0;
	CSK = #60000 1'b1;
	# 20000;
	repeat(9)
	begin
		CSK = 1'b0;
		CSK = #20000 1'b1;
		# 20000;
	end
	CSK = 1'b0;
	CSK = #60000 1'b1;
	# 20000;
	repeat(9)
	begin
		CSK = 1'b0;
		CSK = #20000 1'b1;
		# 20000;
	end
	CSK = 1'b0;
	CSK = #60000 1'b1;
	# 20000;
	repeat(9)
	begin
		CSK = 1'b0;
		CSK = #20000 1'b1;
		# 20000;
	end
	CSK = 1'b0;
end 

// DATA_MOSI
initial
begin
	DATA_MOSI = 1'b0;
	DATA_MOSI = #10000 1'b1;
	DATA_MOSI = #30000 1'b0;
	DATA_MOSI = #330000 1'b1;
	DATA_MOSI = #30000 1'b0;
	DATA_MOSI = #210000 1'b1;
	DATA_MOSI = #30000 1'b0;
	DATA_MOSI = #10000 1'b1;
	DATA_MOSI = #30000 1'b0;
	DATA_MOSI = #640000 1'b1;
	DATA_MOSI = #400000 1'b0;
end 

// FINISH
initial
begin
	FINISH = 1'b0;
	FINISH = #420000 1'b1;
	FINISH = #20000 1'b0;
	FINISH = #420000 1'b1;
	FINISH = #20000 1'b0;
	FINISH = #420000 1'b1;
	FINISH = #20000 1'b0;
	FINISH = #420000 1'b1;
	FINISH = #20000 1'b0;
end 

Secador_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CSK(CSK),
	.DATA_MOSI(DATA_MOSI),
	.FINISH(FINISH),
	.sampler_tx(sampler)
);

Secador_vlg_check_tst tb_out(
	.pwmC(pwmC),
	.Xs(Xs),
	.sampler_rx(sampler)
);
endmodule


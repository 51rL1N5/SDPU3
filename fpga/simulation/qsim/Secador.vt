// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/09/2018 15:11:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Secador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Secador_vlg_sample_tst(
	CLK,
	CSK,
	DATA_MOSI,
	FINISH,
	Tst,
	sampler_tx
);
input  CLK;
input  CSK;
input  DATA_MOSI;
input  FINISH;
input [31:0] Tst;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CSK or DATA_MOSI or FINISH or Tst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Secador_vlg_check_tst (
	counter,
	DIV,
	FP_TO_INT,
	pwm_clock,
	PWM_OUT,
	sampler_rx
);
input [8:0] counter;
input [31:0] DIV;
input [8:0] FP_TO_INT;
input  pwm_clock;
input  PWM_OUT;
input sampler_rx;

reg [8:0] counter_expected;
reg [31:0] DIV_expected;
reg [8:0] FP_TO_INT_expected;
reg  pwm_clock_expected;
reg  PWM_OUT_expected;

reg [8:0] counter_prev;
reg [31:0] DIV_prev;
reg [8:0] FP_TO_INT_prev;
reg  pwm_clock_prev;
reg  PWM_OUT_prev;

reg [8:0] counter_expected_prev;
reg [31:0] DIV_expected_prev;
reg [8:0] FP_TO_INT_expected_prev;
reg  pwm_clock_expected_prev;
reg  PWM_OUT_expected_prev;

reg [8:0] last_counter_exp;
reg [31:0] last_DIV_exp;
reg [8:0] last_FP_TO_INT_exp;
reg  last_pwm_clock_exp;
reg  last_PWM_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	counter_prev = counter;
	DIV_prev = DIV;
	FP_TO_INT_prev = FP_TO_INT;
	pwm_clock_prev = pwm_clock;
	PWM_OUT_prev = PWM_OUT;
end

// update expected /o prevs

always @(trigger)
begin
	counter_expected_prev = counter_expected;
	DIV_expected_prev = DIV_expected;
	FP_TO_INT_expected_prev = FP_TO_INT_expected;
	pwm_clock_expected_prev = pwm_clock_expected;
	PWM_OUT_expected_prev = PWM_OUT_expected;
end



// expected pwm_clock
initial
begin
	pwm_clock_expected = 1'bX;
end 

// expected PWM_OUT
initial
begin
	PWM_OUT_expected = 1'bX;
end 

// expected counter[8]
initial
begin
	counter_expected[8] = 1'bX;
end 

// expected counter[7]
initial
begin
	counter_expected[7] = 1'bX;
end 

// expected counter[6]
initial
begin
	counter_expected[6] = 1'bX;
end 

// expected counter[5]
initial
begin
	counter_expected[5] = 1'bX;
end 

// expected counter[4]
initial
begin
	counter_expected[4] = 1'bX;
end 

// expected counter[3]
initial
begin
	counter_expected[3] = 1'bX;
end 

// expected counter[2]
initial
begin
	counter_expected[2] = 1'bX;
end 

// expected counter[1]
initial
begin
	counter_expected[1] = 1'bX;
end 

// expected counter[0]
initial
begin
	counter_expected[0] = 1'bX;
end 
// expected DIV[ 31 ]
initial
begin
	DIV_expected[31] = 1'bX;
end 
// expected DIV[ 30 ]
initial
begin
	DIV_expected[30] = 1'bX;
end 
// expected DIV[ 29 ]
initial
begin
	DIV_expected[29] = 1'bX;
end 
// expected DIV[ 28 ]
initial
begin
	DIV_expected[28] = 1'bX;
end 
// expected DIV[ 27 ]
initial
begin
	DIV_expected[27] = 1'bX;
end 
// expected DIV[ 26 ]
initial
begin
	DIV_expected[26] = 1'bX;
end 
// expected DIV[ 25 ]
initial
begin
	DIV_expected[25] = 1'bX;
end 
// expected DIV[ 24 ]
initial
begin
	DIV_expected[24] = 1'bX;
end 
// expected DIV[ 23 ]
initial
begin
	DIV_expected[23] = 1'bX;
end 
// expected DIV[ 22 ]
initial
begin
	DIV_expected[22] = 1'bX;
end 
// expected DIV[ 21 ]
initial
begin
	DIV_expected[21] = 1'bX;
end 
// expected DIV[ 20 ]
initial
begin
	DIV_expected[20] = 1'bX;
end 
// expected DIV[ 19 ]
initial
begin
	DIV_expected[19] = 1'bX;
end 
// expected DIV[ 18 ]
initial
begin
	DIV_expected[18] = 1'bX;
end 
// expected DIV[ 17 ]
initial
begin
	DIV_expected[17] = 1'bX;
end 
// expected DIV[ 16 ]
initial
begin
	DIV_expected[16] = 1'bX;
end 
// expected DIV[ 15 ]
initial
begin
	DIV_expected[15] = 1'bX;
end 
// expected DIV[ 14 ]
initial
begin
	DIV_expected[14] = 1'bX;
end 
// expected DIV[ 13 ]
initial
begin
	DIV_expected[13] = 1'bX;
end 
// expected DIV[ 12 ]
initial
begin
	DIV_expected[12] = 1'bX;
end 
// expected DIV[ 11 ]
initial
begin
	DIV_expected[11] = 1'bX;
end 
// expected DIV[ 10 ]
initial
begin
	DIV_expected[10] = 1'bX;
end 
// expected DIV[ 9 ]
initial
begin
	DIV_expected[9] = 1'bX;
end 
// expected DIV[ 8 ]
initial
begin
	DIV_expected[8] = 1'bX;
end 
// expected DIV[ 7 ]
initial
begin
	DIV_expected[7] = 1'bX;
end 
// expected DIV[ 6 ]
initial
begin
	DIV_expected[6] = 1'bX;
end 
// expected DIV[ 5 ]
initial
begin
	DIV_expected[5] = 1'bX;
end 
// expected DIV[ 4 ]
initial
begin
	DIV_expected[4] = 1'bX;
end 
// expected DIV[ 3 ]
initial
begin
	DIV_expected[3] = 1'bX;
end 
// expected DIV[ 2 ]
initial
begin
	DIV_expected[2] = 1'bX;
end 
// expected DIV[ 1 ]
initial
begin
	DIV_expected[1] = 1'bX;
end 
// expected DIV[ 0 ]
initial
begin
	DIV_expected[0] = 1'bX;
end 

// expected FP_TO_INT[8]
initial
begin
	FP_TO_INT_expected[8] = 1'bX;
end 

// expected FP_TO_INT[7]
initial
begin
	FP_TO_INT_expected[7] = 1'bX;
end 

// expected FP_TO_INT[6]
initial
begin
	FP_TO_INT_expected[6] = 1'bX;
end 

// expected FP_TO_INT[5]
initial
begin
	FP_TO_INT_expected[5] = 1'bX;
end 

// expected FP_TO_INT[4]
initial
begin
	FP_TO_INT_expected[4] = 1'bX;
end 

// expected FP_TO_INT[3]
initial
begin
	FP_TO_INT_expected[3] = 1'bX;
end 

// expected FP_TO_INT[2]
initial
begin
	FP_TO_INT_expected[2] = 1'bX;
end 

// expected FP_TO_INT[1]
initial
begin
	FP_TO_INT_expected[1] = 1'bX;
end 

// expected FP_TO_INT[0]
initial
begin
	FP_TO_INT_expected[0] = 1'bX;
end 
// generate trigger
always @(counter_expected or counter or DIV_expected or DIV or FP_TO_INT_expected or FP_TO_INT or pwm_clock_expected or pwm_clock or PWM_OUT_expected or PWM_OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected counter = %b | expected DIV = %b | expected FP_TO_INT = %b | expected pwm_clock = %b | expected PWM_OUT = %b | ",counter_expected_prev,DIV_expected_prev,FP_TO_INT_expected_prev,pwm_clock_expected_prev,PWM_OUT_expected_prev);
	$display("| real counter = %b | real DIV = %b | real FP_TO_INT = %b | real pwm_clock = %b | real PWM_OUT = %b | ",counter_prev,DIV_prev,FP_TO_INT_prev,pwm_clock_prev,PWM_OUT_prev);
`endif
	if (
		( counter_expected_prev[0] !== 1'bx ) && ( counter_prev[0] !== counter_expected_prev[0] )
		&& ((counter_expected_prev[0] !== last_counter_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[0] = counter_expected_prev[0];
	end
	if (
		( counter_expected_prev[1] !== 1'bx ) && ( counter_prev[1] !== counter_expected_prev[1] )
		&& ((counter_expected_prev[1] !== last_counter_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[1] = counter_expected_prev[1];
	end
	if (
		( counter_expected_prev[2] !== 1'bx ) && ( counter_prev[2] !== counter_expected_prev[2] )
		&& ((counter_expected_prev[2] !== last_counter_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[2] = counter_expected_prev[2];
	end
	if (
		( counter_expected_prev[3] !== 1'bx ) && ( counter_prev[3] !== counter_expected_prev[3] )
		&& ((counter_expected_prev[3] !== last_counter_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[3] = counter_expected_prev[3];
	end
	if (
		( counter_expected_prev[4] !== 1'bx ) && ( counter_prev[4] !== counter_expected_prev[4] )
		&& ((counter_expected_prev[4] !== last_counter_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[4] = counter_expected_prev[4];
	end
	if (
		( counter_expected_prev[5] !== 1'bx ) && ( counter_prev[5] !== counter_expected_prev[5] )
		&& ((counter_expected_prev[5] !== last_counter_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[5] = counter_expected_prev[5];
	end
	if (
		( counter_expected_prev[6] !== 1'bx ) && ( counter_prev[6] !== counter_expected_prev[6] )
		&& ((counter_expected_prev[6] !== last_counter_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[6] = counter_expected_prev[6];
	end
	if (
		( counter_expected_prev[7] !== 1'bx ) && ( counter_prev[7] !== counter_expected_prev[7] )
		&& ((counter_expected_prev[7] !== last_counter_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[7] = counter_expected_prev[7];
	end
	if (
		( counter_expected_prev[8] !== 1'bx ) && ( counter_prev[8] !== counter_expected_prev[8] )
		&& ((counter_expected_prev[8] !== last_counter_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counter[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counter_expected_prev);
		$display ("     Real value = %b", counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_counter_exp[8] = counter_expected_prev[8];
	end
	if (
		( DIV_expected_prev[0] !== 1'bx ) && ( DIV_prev[0] !== DIV_expected_prev[0] )
		&& ((DIV_expected_prev[0] !== last_DIV_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[0] = DIV_expected_prev[0];
	end
	if (
		( DIV_expected_prev[1] !== 1'bx ) && ( DIV_prev[1] !== DIV_expected_prev[1] )
		&& ((DIV_expected_prev[1] !== last_DIV_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[1] = DIV_expected_prev[1];
	end
	if (
		( DIV_expected_prev[2] !== 1'bx ) && ( DIV_prev[2] !== DIV_expected_prev[2] )
		&& ((DIV_expected_prev[2] !== last_DIV_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[2] = DIV_expected_prev[2];
	end
	if (
		( DIV_expected_prev[3] !== 1'bx ) && ( DIV_prev[3] !== DIV_expected_prev[3] )
		&& ((DIV_expected_prev[3] !== last_DIV_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[3] = DIV_expected_prev[3];
	end
	if (
		( DIV_expected_prev[4] !== 1'bx ) && ( DIV_prev[4] !== DIV_expected_prev[4] )
		&& ((DIV_expected_prev[4] !== last_DIV_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[4] = DIV_expected_prev[4];
	end
	if (
		( DIV_expected_prev[5] !== 1'bx ) && ( DIV_prev[5] !== DIV_expected_prev[5] )
		&& ((DIV_expected_prev[5] !== last_DIV_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[5] = DIV_expected_prev[5];
	end
	if (
		( DIV_expected_prev[6] !== 1'bx ) && ( DIV_prev[6] !== DIV_expected_prev[6] )
		&& ((DIV_expected_prev[6] !== last_DIV_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[6] = DIV_expected_prev[6];
	end
	if (
		( DIV_expected_prev[7] !== 1'bx ) && ( DIV_prev[7] !== DIV_expected_prev[7] )
		&& ((DIV_expected_prev[7] !== last_DIV_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[7] = DIV_expected_prev[7];
	end
	if (
		( DIV_expected_prev[8] !== 1'bx ) && ( DIV_prev[8] !== DIV_expected_prev[8] )
		&& ((DIV_expected_prev[8] !== last_DIV_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[8] = DIV_expected_prev[8];
	end
	if (
		( DIV_expected_prev[9] !== 1'bx ) && ( DIV_prev[9] !== DIV_expected_prev[9] )
		&& ((DIV_expected_prev[9] !== last_DIV_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[9] = DIV_expected_prev[9];
	end
	if (
		( DIV_expected_prev[10] !== 1'bx ) && ( DIV_prev[10] !== DIV_expected_prev[10] )
		&& ((DIV_expected_prev[10] !== last_DIV_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[10] = DIV_expected_prev[10];
	end
	if (
		( DIV_expected_prev[11] !== 1'bx ) && ( DIV_prev[11] !== DIV_expected_prev[11] )
		&& ((DIV_expected_prev[11] !== last_DIV_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[11] = DIV_expected_prev[11];
	end
	if (
		( DIV_expected_prev[12] !== 1'bx ) && ( DIV_prev[12] !== DIV_expected_prev[12] )
		&& ((DIV_expected_prev[12] !== last_DIV_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[12] = DIV_expected_prev[12];
	end
	if (
		( DIV_expected_prev[13] !== 1'bx ) && ( DIV_prev[13] !== DIV_expected_prev[13] )
		&& ((DIV_expected_prev[13] !== last_DIV_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[13] = DIV_expected_prev[13];
	end
	if (
		( DIV_expected_prev[14] !== 1'bx ) && ( DIV_prev[14] !== DIV_expected_prev[14] )
		&& ((DIV_expected_prev[14] !== last_DIV_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[14] = DIV_expected_prev[14];
	end
	if (
		( DIV_expected_prev[15] !== 1'bx ) && ( DIV_prev[15] !== DIV_expected_prev[15] )
		&& ((DIV_expected_prev[15] !== last_DIV_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[15] = DIV_expected_prev[15];
	end
	if (
		( DIV_expected_prev[16] !== 1'bx ) && ( DIV_prev[16] !== DIV_expected_prev[16] )
		&& ((DIV_expected_prev[16] !== last_DIV_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[16] = DIV_expected_prev[16];
	end
	if (
		( DIV_expected_prev[17] !== 1'bx ) && ( DIV_prev[17] !== DIV_expected_prev[17] )
		&& ((DIV_expected_prev[17] !== last_DIV_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[17] = DIV_expected_prev[17];
	end
	if (
		( DIV_expected_prev[18] !== 1'bx ) && ( DIV_prev[18] !== DIV_expected_prev[18] )
		&& ((DIV_expected_prev[18] !== last_DIV_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[18] = DIV_expected_prev[18];
	end
	if (
		( DIV_expected_prev[19] !== 1'bx ) && ( DIV_prev[19] !== DIV_expected_prev[19] )
		&& ((DIV_expected_prev[19] !== last_DIV_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[19] = DIV_expected_prev[19];
	end
	if (
		( DIV_expected_prev[20] !== 1'bx ) && ( DIV_prev[20] !== DIV_expected_prev[20] )
		&& ((DIV_expected_prev[20] !== last_DIV_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[20] = DIV_expected_prev[20];
	end
	if (
		( DIV_expected_prev[21] !== 1'bx ) && ( DIV_prev[21] !== DIV_expected_prev[21] )
		&& ((DIV_expected_prev[21] !== last_DIV_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[21] = DIV_expected_prev[21];
	end
	if (
		( DIV_expected_prev[22] !== 1'bx ) && ( DIV_prev[22] !== DIV_expected_prev[22] )
		&& ((DIV_expected_prev[22] !== last_DIV_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[22] = DIV_expected_prev[22];
	end
	if (
		( DIV_expected_prev[23] !== 1'bx ) && ( DIV_prev[23] !== DIV_expected_prev[23] )
		&& ((DIV_expected_prev[23] !== last_DIV_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[23] = DIV_expected_prev[23];
	end
	if (
		( DIV_expected_prev[24] !== 1'bx ) && ( DIV_prev[24] !== DIV_expected_prev[24] )
		&& ((DIV_expected_prev[24] !== last_DIV_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[24] = DIV_expected_prev[24];
	end
	if (
		( DIV_expected_prev[25] !== 1'bx ) && ( DIV_prev[25] !== DIV_expected_prev[25] )
		&& ((DIV_expected_prev[25] !== last_DIV_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[25] = DIV_expected_prev[25];
	end
	if (
		( DIV_expected_prev[26] !== 1'bx ) && ( DIV_prev[26] !== DIV_expected_prev[26] )
		&& ((DIV_expected_prev[26] !== last_DIV_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[26] = DIV_expected_prev[26];
	end
	if (
		( DIV_expected_prev[27] !== 1'bx ) && ( DIV_prev[27] !== DIV_expected_prev[27] )
		&& ((DIV_expected_prev[27] !== last_DIV_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[27] = DIV_expected_prev[27];
	end
	if (
		( DIV_expected_prev[28] !== 1'bx ) && ( DIV_prev[28] !== DIV_expected_prev[28] )
		&& ((DIV_expected_prev[28] !== last_DIV_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[28] = DIV_expected_prev[28];
	end
	if (
		( DIV_expected_prev[29] !== 1'bx ) && ( DIV_prev[29] !== DIV_expected_prev[29] )
		&& ((DIV_expected_prev[29] !== last_DIV_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[29] = DIV_expected_prev[29];
	end
	if (
		( DIV_expected_prev[30] !== 1'bx ) && ( DIV_prev[30] !== DIV_expected_prev[30] )
		&& ((DIV_expected_prev[30] !== last_DIV_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[30] = DIV_expected_prev[30];
	end
	if (
		( DIV_expected_prev[31] !== 1'bx ) && ( DIV_prev[31] !== DIV_expected_prev[31] )
		&& ((DIV_expected_prev[31] !== last_DIV_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIV[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIV_expected_prev);
		$display ("     Real value = %b", DIV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIV_exp[31] = DIV_expected_prev[31];
	end
	if (
		( FP_TO_INT_expected_prev[0] !== 1'bx ) && ( FP_TO_INT_prev[0] !== FP_TO_INT_expected_prev[0] )
		&& ((FP_TO_INT_expected_prev[0] !== last_FP_TO_INT_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FP_TO_INT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FP_TO_INT_expected_prev);
		$display ("     Real value = %b", FP_TO_INT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FP_TO_INT_exp[0] = FP_TO_INT_expected_prev[0];
	end
	if (
		( FP_TO_INT_expected_prev[1] !== 1'bx ) && ( FP_TO_INT_prev[1] !== FP_TO_INT_expected_prev[1] )
		&& ((FP_TO_INT_expected_prev[1] !== last_FP_TO_INT_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FP_TO_INT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FP_TO_INT_expected_prev);
		$display ("     Real value = %b", FP_TO_INT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FP_TO_INT_exp[1] = FP_TO_INT_expected_prev[1];
	end
	if (
		( FP_TO_INT_expected_prev[2] !== 1'bx ) && ( FP_TO_INT_prev[2] !== FP_TO_INT_expected_prev[2] )
		&& ((FP_TO_INT_expected_prev[2] !== last_FP_TO_INT_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FP_TO_INT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FP_TO_INT_expected_prev);
		$display ("     Real value = %b", FP_TO_INT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FP_TO_INT_exp[2] = FP_TO_INT_expected_prev[2];
	end
	if (
		( FP_TO_INT_expected_prev[3] !== 1'bx ) && ( FP_TO_INT_prev[3] !== FP_TO_INT_expected_prev[3] )
		&& ((FP_TO_INT_expected_prev[3] !== last_FP_TO_INT_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FP_TO_INT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FP_TO_INT_expected_prev);
		$display ("     Real value = %b", FP_TO_INT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FP_TO_INT_exp[3] = FP_TO_INT_expected_prev[3];
	end
	if (
		( FP_TO_INT_expected_prev[4] !== 1'bx ) && ( FP_TO_INT_prev[4] !== FP_TO_INT_expected_prev[4] )
		&& ((FP_TO_INT_expected_prev[4] !== last_FP_TO_INT_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FP_TO_INT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FP_TO_INT_expected_prev);
		$display ("     Real value = %b", FP_TO_INT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FP_TO_INT_exp[4] = FP_TO_INT_expected_prev[4];
	end
	if (
		( FP_TO_INT_expected_prev[5] !== 1'bx ) && ( FP_TO_INT_prev[5] !== FP_TO_INT_expected_prev[5] )
		&& ((FP_TO_INT_expected_prev[5] !== last_FP_TO_INT_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FP_TO_INT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FP_TO_INT_expected_prev);
		$display ("     Real value = %b", FP_TO_INT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FP_TO_INT_exp[5] = FP_TO_INT_expected_prev[5];
	end
	if (
		( FP_TO_INT_expected_prev[6] !== 1'bx ) && ( FP_TO_INT_prev[6] !== FP_TO_INT_expected_prev[6] )
		&& ((FP_TO_INT_expected_prev[6] !== last_FP_TO_INT_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FP_TO_INT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FP_TO_INT_expected_prev);
		$display ("     Real value = %b", FP_TO_INT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FP_TO_INT_exp[6] = FP_TO_INT_expected_prev[6];
	end
	if (
		( FP_TO_INT_expected_prev[7] !== 1'bx ) && ( FP_TO_INT_prev[7] !== FP_TO_INT_expected_prev[7] )
		&& ((FP_TO_INT_expected_prev[7] !== last_FP_TO_INT_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FP_TO_INT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FP_TO_INT_expected_prev);
		$display ("     Real value = %b", FP_TO_INT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FP_TO_INT_exp[7] = FP_TO_INT_expected_prev[7];
	end
	if (
		( FP_TO_INT_expected_prev[8] !== 1'bx ) && ( FP_TO_INT_prev[8] !== FP_TO_INT_expected_prev[8] )
		&& ((FP_TO_INT_expected_prev[8] !== last_FP_TO_INT_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FP_TO_INT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FP_TO_INT_expected_prev);
		$display ("     Real value = %b", FP_TO_INT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FP_TO_INT_exp[8] = FP_TO_INT_expected_prev[8];
	end
	if (
		( pwm_clock_expected_prev !== 1'bx ) && ( pwm_clock_prev !== pwm_clock_expected_prev )
		&& ((pwm_clock_expected_prev !== last_pwm_clock_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_clock :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_clock_expected_prev);
		$display ("     Real value = %b", pwm_clock_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pwm_clock_exp = pwm_clock_expected_prev;
	end
	if (
		( PWM_OUT_expected_prev !== 1'bx ) && ( PWM_OUT_prev !== PWM_OUT_expected_prev )
		&& ((PWM_OUT_expected_prev !== last_PWM_OUT_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PWM_OUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PWM_OUT_expected_prev);
		$display ("     Real value = %b", PWM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_PWM_OUT_exp = PWM_OUT_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module Secador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CSK;
reg DATA_MOSI;
reg FINISH;
reg [31:0] Tst;
// wires                                               
wire [8:0] counter;
wire [31:0] DIV;
wire [8:0] FP_TO_INT;
wire pwm_clock;
wire PWM_OUT;

wire sampler;                             

// assign statements (if any)                          
Secador i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.counter(counter),
	.CSK(CSK),
	.DATA_MOSI(DATA_MOSI),
	.DIV(DIV),
	.FINISH(FINISH),
	.FP_TO_INT(FP_TO_INT),
	.pwm_clock(pwm_clock),
	.PWM_OUT(PWM_OUT),
	.Tst(Tst)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
// Tst[ 31 ]
initial
begin
	Tst[31] = 1'b0;
end 
// Tst[ 30 ]
initial
begin
	Tst[30] = 1'b0;
end 
// Tst[ 29 ]
initial
begin
	Tst[29] = 1'b1;
end 
// Tst[ 28 ]
initial
begin
	Tst[28] = 1'b1;
end 
// Tst[ 27 ]
initial
begin
	Tst[27] = 1'b1;
end 
// Tst[ 26 ]
initial
begin
	Tst[26] = 1'b1;
end 
// Tst[ 25 ]
initial
begin
	Tst[25] = 1'b1;
end 
// Tst[ 24 ]
initial
begin
	Tst[24] = 1'b1;
end 
// Tst[ 23 ]
initial
begin
	Tst[23] = 1'b0;
end 
// Tst[ 22 ]
initial
begin
	Tst[22] = 1'b0;
	Tst[22] = #400000 1'b1;
end 
// Tst[ 21 ]
initial
begin
	Tst[21] = 1'b0;
end 
// Tst[ 20 ]
initial
begin
	Tst[20] = 1'b0;
end 
// Tst[ 19 ]
initial
begin
	Tst[19] = 1'b0;
end 
// Tst[ 18 ]
initial
begin
	Tst[18] = 1'b0;
end 
// Tst[ 17 ]
initial
begin
	Tst[17] = 1'b0;
end 
// Tst[ 16 ]
initial
begin
	Tst[16] = 1'b0;
end 
// Tst[ 15 ]
initial
begin
	Tst[15] = 1'b0;
end 
// Tst[ 14 ]
initial
begin
	Tst[14] = 1'b0;
end 
// Tst[ 13 ]
initial
begin
	Tst[13] = 1'b0;
end 
// Tst[ 12 ]
initial
begin
	Tst[12] = 1'b0;
end 
// Tst[ 11 ]
initial
begin
	Tst[11] = 1'b0;
end 
// Tst[ 10 ]
initial
begin
	Tst[10] = 1'b0;
end 
// Tst[ 9 ]
initial
begin
	Tst[9] = 1'b0;
end 
// Tst[ 8 ]
initial
begin
	Tst[8] = 1'b0;
end 
// Tst[ 7 ]
initial
begin
	Tst[7] = 1'b0;
end 
// Tst[ 6 ]
initial
begin
	Tst[6] = 1'b0;
end 
// Tst[ 5 ]
initial
begin
	Tst[5] = 1'b0;
end 
// Tst[ 4 ]
initial
begin
	Tst[4] = 1'b0;
end 
// Tst[ 3 ]
initial
begin
	Tst[3] = 1'b0;
end 
// Tst[ 2 ]
initial
begin
	Tst[2] = 1'b0;
end 
// Tst[ 1 ]
initial
begin
	Tst[1] = 1'b0;
end 
// Tst[ 0 ]
initial
begin
	Tst[0] = 1'b0;
end 

Secador_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CSK(CSK),
	.DATA_MOSI(DATA_MOSI),
	.FINISH(FINISH),
	.Tst(Tst),
	.sampler_tx(sampler)
);

Secador_vlg_check_tst tb_out(
	.counter(counter),
	.DIV(DIV),
	.FP_TO_INT(FP_TO_INT),
	.pwm_clock(pwm_clock),
	.PWM_OUT(PWM_OUT),
	.sampler_rx(sampler)
);
endmodule


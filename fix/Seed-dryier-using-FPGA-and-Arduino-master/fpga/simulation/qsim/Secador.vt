// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/17/2018 18:02:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Secador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Secador_vlg_sample_tst(
	CLK,
	CSK,
	DATA_MOSI,
	FINISH,
	HALT,
	S1,
	S2,
	sampler_tx
);
input  CLK;
input  CSK;
input  DATA_MOSI;
input  FINISH;
input  HALT;
input [7:0] S1;
input [7:0] S2;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CSK or DATA_MOSI or FINISH or HALT or S1 or S2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Secador_vlg_check_tst (
	DATA_MISO,
	debug_pwm,
	debug_pwm_value,
	pin_name1,
	Tempo,
	Z,
	sampler_rx
);
input  DATA_MISO;
input  debug_pwm;
input [7:0] debug_pwm_value;
input  pin_name1;
input [31:0] Tempo;
input [31:0] Z;
input sampler_rx;

reg  DATA_MISO_expected;
reg  debug_pwm_expected;
reg [7:0] debug_pwm_value_expected;
reg  pin_name1_expected;
reg [31:0] Tempo_expected;
reg [31:0] Z_expected;

reg  DATA_MISO_prev;
reg  debug_pwm_prev;
reg [7:0] debug_pwm_value_prev;
reg  pin_name1_prev;
reg [31:0] Tempo_prev;
reg [31:0] Z_prev;

reg  debug_pwm_expected_prev;
reg [7:0] debug_pwm_value_expected_prev;
reg [31:0] Tempo_expected_prev;
reg [31:0] Z_expected_prev;

reg  last_debug_pwm_exp;
reg [7:0] last_debug_pwm_value_exp;
reg [31:0] last_Tempo_exp;
reg [31:0] last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	DATA_MISO_prev = DATA_MISO;
	debug_pwm_prev = debug_pwm;
	debug_pwm_value_prev = debug_pwm_value;
	pin_name1_prev = pin_name1;
	Tempo_prev = Tempo;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	debug_pwm_expected_prev = debug_pwm_expected;
	debug_pwm_value_expected_prev = debug_pwm_value_expected;
	Tempo_expected_prev = Tempo_expected;
	Z_expected_prev = Z_expected;
end


// expected Tempo[ 31 ]
initial
begin
	Tempo_expected[31] = 1'bX;
	Tempo_expected[31] = #999000 1'b0;
end 
// expected Tempo[ 30 ]
initial
begin
	Tempo_expected[30] = 1'bX;
	Tempo_expected[30] = #999000 1'b0;
end 
// expected Tempo[ 29 ]
initial
begin
	Tempo_expected[29] = 1'bX;
	Tempo_expected[29] = #999000 1'b0;
end 
// expected Tempo[ 28 ]
initial
begin
	Tempo_expected[28] = 1'bX;
	Tempo_expected[28] = #999000 1'b0;
end 
// expected Tempo[ 27 ]
initial
begin
	Tempo_expected[27] = 1'bX;
	Tempo_expected[27] = #999000 1'b0;
end 
// expected Tempo[ 26 ]
initial
begin
	Tempo_expected[26] = 1'bX;
	Tempo_expected[26] = #999000 1'b0;
end 
// expected Tempo[ 25 ]
initial
begin
	Tempo_expected[25] = 1'bX;
	Tempo_expected[25] = #999000 1'b0;
end 
// expected Tempo[ 24 ]
initial
begin
	Tempo_expected[24] = 1'bX;
	Tempo_expected[24] = #999000 1'b0;
end 
// expected Tempo[ 23 ]
initial
begin
	Tempo_expected[23] = 1'bX;
	Tempo_expected[23] = #999000 1'b0;
end 
// expected Tempo[ 22 ]
initial
begin
	Tempo_expected[22] = 1'bX;
	Tempo_expected[22] = #999000 1'b0;
end 
// expected Tempo[ 21 ]
initial
begin
	Tempo_expected[21] = 1'bX;
	Tempo_expected[21] = #999000 1'b0;
end 
// expected Tempo[ 20 ]
initial
begin
	Tempo_expected[20] = 1'bX;
	Tempo_expected[20] = #999000 1'b0;
end 
// expected Tempo[ 19 ]
initial
begin
	Tempo_expected[19] = 1'bX;
	Tempo_expected[19] = #999000 1'b0;
end 
// expected Tempo[ 18 ]
initial
begin
	Tempo_expected[18] = 1'bX;
	Tempo_expected[18] = #999000 1'b0;
end 
// expected Tempo[ 17 ]
initial
begin
	Tempo_expected[17] = 1'bX;
	Tempo_expected[17] = #999000 1'b0;
end 
// expected Tempo[ 16 ]
initial
begin
	Tempo_expected[16] = 1'bX;
	Tempo_expected[16] = #999000 1'b0;
end 
// expected Tempo[ 15 ]
initial
begin
	Tempo_expected[15] = 1'bX;
	Tempo_expected[15] = #999000 1'b0;
end 
// expected Tempo[ 14 ]
initial
begin
	Tempo_expected[14] = 1'bX;
	Tempo_expected[14] = #999000 1'b0;
end 
// expected Tempo[ 13 ]
initial
begin
	Tempo_expected[13] = 1'bX;
	Tempo_expected[13] = #999000 1'b0;
end 
// expected Tempo[ 12 ]
initial
begin
	Tempo_expected[12] = 1'bX;
	Tempo_expected[12] = #999000 1'b0;
end 
// expected Tempo[ 11 ]
initial
begin
	Tempo_expected[11] = 1'bX;
	Tempo_expected[11] = #999000 1'b0;
end 
// expected Tempo[ 10 ]
initial
begin
	Tempo_expected[10] = 1'bX;
	Tempo_expected[10] = #999000 1'b0;
end 
// expected Tempo[ 9 ]
initial
begin
	Tempo_expected[9] = 1'bX;
	Tempo_expected[9] = #999000 1'b0;
end 
// expected Tempo[ 8 ]
initial
begin
	Tempo_expected[8] = 1'bX;
	Tempo_expected[8] = #999000 1'b0;
end 
// expected Tempo[ 7 ]
initial
begin
	Tempo_expected[7] = 1'bX;
	Tempo_expected[7] = #999000 1'b0;
end 
// expected Tempo[ 6 ]
initial
begin
	Tempo_expected[6] = 1'bX;
	Tempo_expected[6] = #999000 1'b0;
end 
// expected Tempo[ 5 ]
initial
begin
	Tempo_expected[5] = 1'bX;
	Tempo_expected[5] = #999000 1'b0;
end 
// expected Tempo[ 4 ]
initial
begin
	Tempo_expected[4] = 1'bX;
	Tempo_expected[4] = #999000 1'b0;
end 
// expected Tempo[ 3 ]
initial
begin
	Tempo_expected[3] = 1'bX;
	Tempo_expected[3] = #999000 1'b0;
end 
// expected Tempo[ 2 ]
initial
begin
	Tempo_expected[2] = 1'bX;
	Tempo_expected[2] = #999000 1'b0;
end 
// expected Tempo[ 1 ]
initial
begin
	Tempo_expected[1] = 1'bX;
	Tempo_expected[1] = #999000 1'b0;
end 
// expected Tempo[ 0 ]
initial
begin
	Tempo_expected[0] = 1'bX;
	Tempo_expected[0] = #999000 1'b0;
end 
// expected Z[ 31 ]
initial
begin
	Z_expected[31] = 1'bX;
	Z_expected[31] = #999000 1'b0;
end 
// expected Z[ 30 ]
initial
begin
	Z_expected[30] = 1'bX;
	Z_expected[30] = #999000 1'b0;
end 
// expected Z[ 29 ]
initial
begin
	Z_expected[29] = 1'bX;
	Z_expected[29] = #999000 1'b0;
end 
// expected Z[ 28 ]
initial
begin
	Z_expected[28] = 1'bX;
	Z_expected[28] = #999000 1'b0;
end 
// expected Z[ 27 ]
initial
begin
	Z_expected[27] = 1'bX;
	Z_expected[27] = #999000 1'b0;
end 
// expected Z[ 26 ]
initial
begin
	Z_expected[26] = 1'bX;
	Z_expected[26] = #999000 1'b0;
end 
// expected Z[ 25 ]
initial
begin
	Z_expected[25] = 1'bX;
	Z_expected[25] = #999000 1'b0;
end 
// expected Z[ 24 ]
initial
begin
	Z_expected[24] = 1'bX;
	Z_expected[24] = #999000 1'b0;
end 
// expected Z[ 23 ]
initial
begin
	Z_expected[23] = 1'bX;
	Z_expected[23] = #999000 1'b0;
end 
// expected Z[ 22 ]
initial
begin
	Z_expected[22] = 1'bX;
	Z_expected[22] = #999000 1'b0;
end 
// expected Z[ 21 ]
initial
begin
	Z_expected[21] = 1'bX;
	Z_expected[21] = #999000 1'b0;
end 
// expected Z[ 20 ]
initial
begin
	Z_expected[20] = 1'bX;
	Z_expected[20] = #999000 1'b0;
end 
// expected Z[ 19 ]
initial
begin
	Z_expected[19] = 1'bX;
	Z_expected[19] = #999000 1'b0;
end 
// expected Z[ 18 ]
initial
begin
	Z_expected[18] = 1'bX;
	Z_expected[18] = #999000 1'b0;
end 
// expected Z[ 17 ]
initial
begin
	Z_expected[17] = 1'bX;
	Z_expected[17] = #999000 1'b0;
end 
// expected Z[ 16 ]
initial
begin
	Z_expected[16] = 1'bX;
	Z_expected[16] = #999000 1'b0;
end 
// expected Z[ 15 ]
initial
begin
	Z_expected[15] = 1'bX;
	Z_expected[15] = #999000 1'b0;
end 
// expected Z[ 14 ]
initial
begin
	Z_expected[14] = 1'bX;
	Z_expected[14] = #999000 1'b0;
end 
// expected Z[ 13 ]
initial
begin
	Z_expected[13] = 1'bX;
	Z_expected[13] = #999000 1'b0;
end 
// expected Z[ 12 ]
initial
begin
	Z_expected[12] = 1'bX;
	Z_expected[12] = #999000 1'b0;
end 
// expected Z[ 11 ]
initial
begin
	Z_expected[11] = 1'bX;
	Z_expected[11] = #999000 1'b0;
end 
// expected Z[ 10 ]
initial
begin
	Z_expected[10] = 1'bX;
	Z_expected[10] = #999000 1'b0;
end 
// expected Z[ 9 ]
initial
begin
	Z_expected[9] = 1'bX;
	Z_expected[9] = #999000 1'b0;
end 
// expected Z[ 8 ]
initial
begin
	Z_expected[8] = 1'bX;
	Z_expected[8] = #999000 1'b0;
end 
// expected Z[ 7 ]
initial
begin
	Z_expected[7] = 1'bX;
	Z_expected[7] = #999000 1'b0;
end 
// expected Z[ 6 ]
initial
begin
	Z_expected[6] = 1'bX;
	Z_expected[6] = #999000 1'b0;
end 
// expected Z[ 5 ]
initial
begin
	Z_expected[5] = 1'bX;
	Z_expected[5] = #999000 1'b0;
end 
// expected Z[ 4 ]
initial
begin
	Z_expected[4] = 1'bX;
	Z_expected[4] = #999000 1'b0;
end 
// expected Z[ 3 ]
initial
begin
	Z_expected[3] = 1'bX;
	Z_expected[3] = #999000 1'b0;
end 
// expected Z[ 2 ]
initial
begin
	Z_expected[2] = 1'bX;
	Z_expected[2] = #999000 1'b0;
end 
// expected Z[ 1 ]
initial
begin
	Z_expected[1] = 1'bX;
	Z_expected[1] = #999000 1'b0;
end 
// expected Z[ 0 ]
initial
begin
	Z_expected[0] = 1'bX;
	Z_expected[0] = #999000 1'b0;
end 
// expected debug_pwm_value[ 7 ]
initial
begin
	debug_pwm_value_expected[7] = 1'bX;
	debug_pwm_value_expected[7] = #999000 1'b0;
end 
// expected debug_pwm_value[ 6 ]
initial
begin
	debug_pwm_value_expected[6] = 1'bX;
	debug_pwm_value_expected[6] = #999000 1'b0;
end 
// expected debug_pwm_value[ 5 ]
initial
begin
	debug_pwm_value_expected[5] = 1'bX;
	debug_pwm_value_expected[5] = #999000 1'b0;
end 
// expected debug_pwm_value[ 4 ]
initial
begin
	debug_pwm_value_expected[4] = 1'bX;
	debug_pwm_value_expected[4] = #999000 1'b0;
end 
// expected debug_pwm_value[ 3 ]
initial
begin
	debug_pwm_value_expected[3] = 1'bX;
	debug_pwm_value_expected[3] = #999000 1'b0;
end 
// expected debug_pwm_value[ 2 ]
initial
begin
	debug_pwm_value_expected[2] = 1'bX;
	debug_pwm_value_expected[2] = #999000 1'b0;
end 
// expected debug_pwm_value[ 1 ]
initial
begin
	debug_pwm_value_expected[1] = 1'bX;
	debug_pwm_value_expected[1] = #999000 1'b0;
end 
// expected debug_pwm_value[ 0 ]
initial
begin
	debug_pwm_value_expected[0] = 1'bX;
	debug_pwm_value_expected[0] = #999000 1'b0;
end 

// expected debug_pwm
initial
begin
	debug_pwm_expected = 1'bX;
	debug_pwm_expected = #999000 1'b0;
end 
// generate trigger
always @(DATA_MISO_expected or DATA_MISO or debug_pwm_expected or debug_pwm or debug_pwm_value_expected or debug_pwm_value or pin_name1_expected or pin_name1 or Tempo_expected or Tempo or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DATA_MISO = %b | expected debug_pwm = %b | expected debug_pwm_value = %b | expected pin_name1 = %b | expected Tempo = %b | expected Z = %b | ",DATA_MISO_expected_prev,debug_pwm_expected_prev,debug_pwm_value_expected_prev,pin_name1_expected_prev,Tempo_expected_prev,Z_expected_prev);
	$display("| real DATA_MISO = %b | real debug_pwm = %b | real debug_pwm_value = %b | real pin_name1 = %b | real Tempo = %b | real Z = %b | ",DATA_MISO_prev,debug_pwm_prev,debug_pwm_value_prev,pin_name1_prev,Tempo_prev,Z_prev);
`endif
	if (
		( debug_pwm_expected_prev !== 1'bx ) && ( debug_pwm_prev !== debug_pwm_expected_prev )
		&& ((debug_pwm_expected_prev !== last_debug_pwm_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_pwm :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_pwm_expected_prev);
		$display ("     Real value = %b", debug_pwm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_pwm_exp = debug_pwm_expected_prev;
	end
	if (
		( debug_pwm_value_expected_prev[0] !== 1'bx ) && ( debug_pwm_value_prev[0] !== debug_pwm_value_expected_prev[0] )
		&& ((debug_pwm_value_expected_prev[0] !== last_debug_pwm_value_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_pwm_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_pwm_value_expected_prev);
		$display ("     Real value = %b", debug_pwm_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_pwm_value_exp[0] = debug_pwm_value_expected_prev[0];
	end
	if (
		( debug_pwm_value_expected_prev[1] !== 1'bx ) && ( debug_pwm_value_prev[1] !== debug_pwm_value_expected_prev[1] )
		&& ((debug_pwm_value_expected_prev[1] !== last_debug_pwm_value_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_pwm_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_pwm_value_expected_prev);
		$display ("     Real value = %b", debug_pwm_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_pwm_value_exp[1] = debug_pwm_value_expected_prev[1];
	end
	if (
		( debug_pwm_value_expected_prev[2] !== 1'bx ) && ( debug_pwm_value_prev[2] !== debug_pwm_value_expected_prev[2] )
		&& ((debug_pwm_value_expected_prev[2] !== last_debug_pwm_value_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_pwm_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_pwm_value_expected_prev);
		$display ("     Real value = %b", debug_pwm_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_pwm_value_exp[2] = debug_pwm_value_expected_prev[2];
	end
	if (
		( debug_pwm_value_expected_prev[3] !== 1'bx ) && ( debug_pwm_value_prev[3] !== debug_pwm_value_expected_prev[3] )
		&& ((debug_pwm_value_expected_prev[3] !== last_debug_pwm_value_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_pwm_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_pwm_value_expected_prev);
		$display ("     Real value = %b", debug_pwm_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_pwm_value_exp[3] = debug_pwm_value_expected_prev[3];
	end
	if (
		( debug_pwm_value_expected_prev[4] !== 1'bx ) && ( debug_pwm_value_prev[4] !== debug_pwm_value_expected_prev[4] )
		&& ((debug_pwm_value_expected_prev[4] !== last_debug_pwm_value_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_pwm_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_pwm_value_expected_prev);
		$display ("     Real value = %b", debug_pwm_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_pwm_value_exp[4] = debug_pwm_value_expected_prev[4];
	end
	if (
		( debug_pwm_value_expected_prev[5] !== 1'bx ) && ( debug_pwm_value_prev[5] !== debug_pwm_value_expected_prev[5] )
		&& ((debug_pwm_value_expected_prev[5] !== last_debug_pwm_value_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_pwm_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_pwm_value_expected_prev);
		$display ("     Real value = %b", debug_pwm_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_pwm_value_exp[5] = debug_pwm_value_expected_prev[5];
	end
	if (
		( debug_pwm_value_expected_prev[6] !== 1'bx ) && ( debug_pwm_value_prev[6] !== debug_pwm_value_expected_prev[6] )
		&& ((debug_pwm_value_expected_prev[6] !== last_debug_pwm_value_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_pwm_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_pwm_value_expected_prev);
		$display ("     Real value = %b", debug_pwm_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_pwm_value_exp[6] = debug_pwm_value_expected_prev[6];
	end
	if (
		( debug_pwm_value_expected_prev[7] !== 1'bx ) && ( debug_pwm_value_prev[7] !== debug_pwm_value_expected_prev[7] )
		&& ((debug_pwm_value_expected_prev[7] !== last_debug_pwm_value_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_pwm_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_pwm_value_expected_prev);
		$display ("     Real value = %b", debug_pwm_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_pwm_value_exp[7] = debug_pwm_value_expected_prev[7];
	end
	if (
		( Tempo_expected_prev[0] !== 1'bx ) && ( Tempo_prev[0] !== Tempo_expected_prev[0] )
		&& ((Tempo_expected_prev[0] !== last_Tempo_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[0] = Tempo_expected_prev[0];
	end
	if (
		( Tempo_expected_prev[1] !== 1'bx ) && ( Tempo_prev[1] !== Tempo_expected_prev[1] )
		&& ((Tempo_expected_prev[1] !== last_Tempo_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[1] = Tempo_expected_prev[1];
	end
	if (
		( Tempo_expected_prev[2] !== 1'bx ) && ( Tempo_prev[2] !== Tempo_expected_prev[2] )
		&& ((Tempo_expected_prev[2] !== last_Tempo_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[2] = Tempo_expected_prev[2];
	end
	if (
		( Tempo_expected_prev[3] !== 1'bx ) && ( Tempo_prev[3] !== Tempo_expected_prev[3] )
		&& ((Tempo_expected_prev[3] !== last_Tempo_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[3] = Tempo_expected_prev[3];
	end
	if (
		( Tempo_expected_prev[4] !== 1'bx ) && ( Tempo_prev[4] !== Tempo_expected_prev[4] )
		&& ((Tempo_expected_prev[4] !== last_Tempo_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[4] = Tempo_expected_prev[4];
	end
	if (
		( Tempo_expected_prev[5] !== 1'bx ) && ( Tempo_prev[5] !== Tempo_expected_prev[5] )
		&& ((Tempo_expected_prev[5] !== last_Tempo_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[5] = Tempo_expected_prev[5];
	end
	if (
		( Tempo_expected_prev[6] !== 1'bx ) && ( Tempo_prev[6] !== Tempo_expected_prev[6] )
		&& ((Tempo_expected_prev[6] !== last_Tempo_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[6] = Tempo_expected_prev[6];
	end
	if (
		( Tempo_expected_prev[7] !== 1'bx ) && ( Tempo_prev[7] !== Tempo_expected_prev[7] )
		&& ((Tempo_expected_prev[7] !== last_Tempo_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[7] = Tempo_expected_prev[7];
	end
	if (
		( Tempo_expected_prev[8] !== 1'bx ) && ( Tempo_prev[8] !== Tempo_expected_prev[8] )
		&& ((Tempo_expected_prev[8] !== last_Tempo_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[8] = Tempo_expected_prev[8];
	end
	if (
		( Tempo_expected_prev[9] !== 1'bx ) && ( Tempo_prev[9] !== Tempo_expected_prev[9] )
		&& ((Tempo_expected_prev[9] !== last_Tempo_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[9] = Tempo_expected_prev[9];
	end
	if (
		( Tempo_expected_prev[10] !== 1'bx ) && ( Tempo_prev[10] !== Tempo_expected_prev[10] )
		&& ((Tempo_expected_prev[10] !== last_Tempo_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[10] = Tempo_expected_prev[10];
	end
	if (
		( Tempo_expected_prev[11] !== 1'bx ) && ( Tempo_prev[11] !== Tempo_expected_prev[11] )
		&& ((Tempo_expected_prev[11] !== last_Tempo_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[11] = Tempo_expected_prev[11];
	end
	if (
		( Tempo_expected_prev[12] !== 1'bx ) && ( Tempo_prev[12] !== Tempo_expected_prev[12] )
		&& ((Tempo_expected_prev[12] !== last_Tempo_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[12] = Tempo_expected_prev[12];
	end
	if (
		( Tempo_expected_prev[13] !== 1'bx ) && ( Tempo_prev[13] !== Tempo_expected_prev[13] )
		&& ((Tempo_expected_prev[13] !== last_Tempo_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[13] = Tempo_expected_prev[13];
	end
	if (
		( Tempo_expected_prev[14] !== 1'bx ) && ( Tempo_prev[14] !== Tempo_expected_prev[14] )
		&& ((Tempo_expected_prev[14] !== last_Tempo_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[14] = Tempo_expected_prev[14];
	end
	if (
		( Tempo_expected_prev[15] !== 1'bx ) && ( Tempo_prev[15] !== Tempo_expected_prev[15] )
		&& ((Tempo_expected_prev[15] !== last_Tempo_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[15] = Tempo_expected_prev[15];
	end
	if (
		( Tempo_expected_prev[16] !== 1'bx ) && ( Tempo_prev[16] !== Tempo_expected_prev[16] )
		&& ((Tempo_expected_prev[16] !== last_Tempo_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[16] = Tempo_expected_prev[16];
	end
	if (
		( Tempo_expected_prev[17] !== 1'bx ) && ( Tempo_prev[17] !== Tempo_expected_prev[17] )
		&& ((Tempo_expected_prev[17] !== last_Tempo_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[17] = Tempo_expected_prev[17];
	end
	if (
		( Tempo_expected_prev[18] !== 1'bx ) && ( Tempo_prev[18] !== Tempo_expected_prev[18] )
		&& ((Tempo_expected_prev[18] !== last_Tempo_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[18] = Tempo_expected_prev[18];
	end
	if (
		( Tempo_expected_prev[19] !== 1'bx ) && ( Tempo_prev[19] !== Tempo_expected_prev[19] )
		&& ((Tempo_expected_prev[19] !== last_Tempo_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[19] = Tempo_expected_prev[19];
	end
	if (
		( Tempo_expected_prev[20] !== 1'bx ) && ( Tempo_prev[20] !== Tempo_expected_prev[20] )
		&& ((Tempo_expected_prev[20] !== last_Tempo_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[20] = Tempo_expected_prev[20];
	end
	if (
		( Tempo_expected_prev[21] !== 1'bx ) && ( Tempo_prev[21] !== Tempo_expected_prev[21] )
		&& ((Tempo_expected_prev[21] !== last_Tempo_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[21] = Tempo_expected_prev[21];
	end
	if (
		( Tempo_expected_prev[22] !== 1'bx ) && ( Tempo_prev[22] !== Tempo_expected_prev[22] )
		&& ((Tempo_expected_prev[22] !== last_Tempo_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[22] = Tempo_expected_prev[22];
	end
	if (
		( Tempo_expected_prev[23] !== 1'bx ) && ( Tempo_prev[23] !== Tempo_expected_prev[23] )
		&& ((Tempo_expected_prev[23] !== last_Tempo_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[23] = Tempo_expected_prev[23];
	end
	if (
		( Tempo_expected_prev[24] !== 1'bx ) && ( Tempo_prev[24] !== Tempo_expected_prev[24] )
		&& ((Tempo_expected_prev[24] !== last_Tempo_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[24] = Tempo_expected_prev[24];
	end
	if (
		( Tempo_expected_prev[25] !== 1'bx ) && ( Tempo_prev[25] !== Tempo_expected_prev[25] )
		&& ((Tempo_expected_prev[25] !== last_Tempo_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[25] = Tempo_expected_prev[25];
	end
	if (
		( Tempo_expected_prev[26] !== 1'bx ) && ( Tempo_prev[26] !== Tempo_expected_prev[26] )
		&& ((Tempo_expected_prev[26] !== last_Tempo_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[26] = Tempo_expected_prev[26];
	end
	if (
		( Tempo_expected_prev[27] !== 1'bx ) && ( Tempo_prev[27] !== Tempo_expected_prev[27] )
		&& ((Tempo_expected_prev[27] !== last_Tempo_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[27] = Tempo_expected_prev[27];
	end
	if (
		( Tempo_expected_prev[28] !== 1'bx ) && ( Tempo_prev[28] !== Tempo_expected_prev[28] )
		&& ((Tempo_expected_prev[28] !== last_Tempo_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[28] = Tempo_expected_prev[28];
	end
	if (
		( Tempo_expected_prev[29] !== 1'bx ) && ( Tempo_prev[29] !== Tempo_expected_prev[29] )
		&& ((Tempo_expected_prev[29] !== last_Tempo_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[29] = Tempo_expected_prev[29];
	end
	if (
		( Tempo_expected_prev[30] !== 1'bx ) && ( Tempo_prev[30] !== Tempo_expected_prev[30] )
		&& ((Tempo_expected_prev[30] !== last_Tempo_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[30] = Tempo_expected_prev[30];
	end
	if (
		( Tempo_expected_prev[31] !== 1'bx ) && ( Tempo_prev[31] !== Tempo_expected_prev[31] )
		&& ((Tempo_expected_prev[31] !== last_Tempo_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Tempo[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Tempo_expected_prev);
		$display ("     Real value = %b", Tempo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Tempo_exp[31] = Tempo_expected_prev[31];
	end
	if (
		( Z_expected_prev[0] !== 1'bx ) && ( Z_prev[0] !== Z_expected_prev[0] )
		&& ((Z_expected_prev[0] !== last_Z_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[0] = Z_expected_prev[0];
	end
	if (
		( Z_expected_prev[1] !== 1'bx ) && ( Z_prev[1] !== Z_expected_prev[1] )
		&& ((Z_expected_prev[1] !== last_Z_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[1] = Z_expected_prev[1];
	end
	if (
		( Z_expected_prev[2] !== 1'bx ) && ( Z_prev[2] !== Z_expected_prev[2] )
		&& ((Z_expected_prev[2] !== last_Z_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[2] = Z_expected_prev[2];
	end
	if (
		( Z_expected_prev[3] !== 1'bx ) && ( Z_prev[3] !== Z_expected_prev[3] )
		&& ((Z_expected_prev[3] !== last_Z_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[3] = Z_expected_prev[3];
	end
	if (
		( Z_expected_prev[4] !== 1'bx ) && ( Z_prev[4] !== Z_expected_prev[4] )
		&& ((Z_expected_prev[4] !== last_Z_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[4] = Z_expected_prev[4];
	end
	if (
		( Z_expected_prev[5] !== 1'bx ) && ( Z_prev[5] !== Z_expected_prev[5] )
		&& ((Z_expected_prev[5] !== last_Z_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[5] = Z_expected_prev[5];
	end
	if (
		( Z_expected_prev[6] !== 1'bx ) && ( Z_prev[6] !== Z_expected_prev[6] )
		&& ((Z_expected_prev[6] !== last_Z_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[6] = Z_expected_prev[6];
	end
	if (
		( Z_expected_prev[7] !== 1'bx ) && ( Z_prev[7] !== Z_expected_prev[7] )
		&& ((Z_expected_prev[7] !== last_Z_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[7] = Z_expected_prev[7];
	end
	if (
		( Z_expected_prev[8] !== 1'bx ) && ( Z_prev[8] !== Z_expected_prev[8] )
		&& ((Z_expected_prev[8] !== last_Z_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[8] = Z_expected_prev[8];
	end
	if (
		( Z_expected_prev[9] !== 1'bx ) && ( Z_prev[9] !== Z_expected_prev[9] )
		&& ((Z_expected_prev[9] !== last_Z_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[9] = Z_expected_prev[9];
	end
	if (
		( Z_expected_prev[10] !== 1'bx ) && ( Z_prev[10] !== Z_expected_prev[10] )
		&& ((Z_expected_prev[10] !== last_Z_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[10] = Z_expected_prev[10];
	end
	if (
		( Z_expected_prev[11] !== 1'bx ) && ( Z_prev[11] !== Z_expected_prev[11] )
		&& ((Z_expected_prev[11] !== last_Z_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[11] = Z_expected_prev[11];
	end
	if (
		( Z_expected_prev[12] !== 1'bx ) && ( Z_prev[12] !== Z_expected_prev[12] )
		&& ((Z_expected_prev[12] !== last_Z_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[12] = Z_expected_prev[12];
	end
	if (
		( Z_expected_prev[13] !== 1'bx ) && ( Z_prev[13] !== Z_expected_prev[13] )
		&& ((Z_expected_prev[13] !== last_Z_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[13] = Z_expected_prev[13];
	end
	if (
		( Z_expected_prev[14] !== 1'bx ) && ( Z_prev[14] !== Z_expected_prev[14] )
		&& ((Z_expected_prev[14] !== last_Z_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[14] = Z_expected_prev[14];
	end
	if (
		( Z_expected_prev[15] !== 1'bx ) && ( Z_prev[15] !== Z_expected_prev[15] )
		&& ((Z_expected_prev[15] !== last_Z_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[15] = Z_expected_prev[15];
	end
	if (
		( Z_expected_prev[16] !== 1'bx ) && ( Z_prev[16] !== Z_expected_prev[16] )
		&& ((Z_expected_prev[16] !== last_Z_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[16] = Z_expected_prev[16];
	end
	if (
		( Z_expected_prev[17] !== 1'bx ) && ( Z_prev[17] !== Z_expected_prev[17] )
		&& ((Z_expected_prev[17] !== last_Z_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[17] = Z_expected_prev[17];
	end
	if (
		( Z_expected_prev[18] !== 1'bx ) && ( Z_prev[18] !== Z_expected_prev[18] )
		&& ((Z_expected_prev[18] !== last_Z_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[18] = Z_expected_prev[18];
	end
	if (
		( Z_expected_prev[19] !== 1'bx ) && ( Z_prev[19] !== Z_expected_prev[19] )
		&& ((Z_expected_prev[19] !== last_Z_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[19] = Z_expected_prev[19];
	end
	if (
		( Z_expected_prev[20] !== 1'bx ) && ( Z_prev[20] !== Z_expected_prev[20] )
		&& ((Z_expected_prev[20] !== last_Z_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[20] = Z_expected_prev[20];
	end
	if (
		( Z_expected_prev[21] !== 1'bx ) && ( Z_prev[21] !== Z_expected_prev[21] )
		&& ((Z_expected_prev[21] !== last_Z_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[21] = Z_expected_prev[21];
	end
	if (
		( Z_expected_prev[22] !== 1'bx ) && ( Z_prev[22] !== Z_expected_prev[22] )
		&& ((Z_expected_prev[22] !== last_Z_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[22] = Z_expected_prev[22];
	end
	if (
		( Z_expected_prev[23] !== 1'bx ) && ( Z_prev[23] !== Z_expected_prev[23] )
		&& ((Z_expected_prev[23] !== last_Z_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[23] = Z_expected_prev[23];
	end
	if (
		( Z_expected_prev[24] !== 1'bx ) && ( Z_prev[24] !== Z_expected_prev[24] )
		&& ((Z_expected_prev[24] !== last_Z_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[24] = Z_expected_prev[24];
	end
	if (
		( Z_expected_prev[25] !== 1'bx ) && ( Z_prev[25] !== Z_expected_prev[25] )
		&& ((Z_expected_prev[25] !== last_Z_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[25] = Z_expected_prev[25];
	end
	if (
		( Z_expected_prev[26] !== 1'bx ) && ( Z_prev[26] !== Z_expected_prev[26] )
		&& ((Z_expected_prev[26] !== last_Z_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[26] = Z_expected_prev[26];
	end
	if (
		( Z_expected_prev[27] !== 1'bx ) && ( Z_prev[27] !== Z_expected_prev[27] )
		&& ((Z_expected_prev[27] !== last_Z_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[27] = Z_expected_prev[27];
	end
	if (
		( Z_expected_prev[28] !== 1'bx ) && ( Z_prev[28] !== Z_expected_prev[28] )
		&& ((Z_expected_prev[28] !== last_Z_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[28] = Z_expected_prev[28];
	end
	if (
		( Z_expected_prev[29] !== 1'bx ) && ( Z_prev[29] !== Z_expected_prev[29] )
		&& ((Z_expected_prev[29] !== last_Z_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[29] = Z_expected_prev[29];
	end
	if (
		( Z_expected_prev[30] !== 1'bx ) && ( Z_prev[30] !== Z_expected_prev[30] )
		&& ((Z_expected_prev[30] !== last_Z_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[30] = Z_expected_prev[30];
	end
	if (
		( Z_expected_prev[31] !== 1'bx ) && ( Z_prev[31] !== Z_expected_prev[31] )
		&& ((Z_expected_prev[31] !== last_Z_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z_exp[31] = Z_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Secador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CSK;
reg DATA_MOSI;
reg FINISH;
reg HALT;
reg [7:0] S1;
reg [7:0] S2;
// wires                                               
wire DATA_MISO;
wire debug_pwm;
wire [7:0] debug_pwm_value;
wire pin_name1;
wire [31:0] Tempo;
wire [31:0] Z;

wire sampler;                             

// assign statements (if any)                          
Secador i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CSK(CSK),
	.DATA_MISO(DATA_MISO),
	.DATA_MOSI(DATA_MOSI),
	.debug_pwm(debug_pwm),
	.debug_pwm_value(debug_pwm_value),
	.FINISH(FINISH),
	.HALT(HALT),
	.pin_name1(pin_name1),
	.S1(S1),
	.S2(S2),
	.Tempo(Tempo),
	.Z(Z)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// S1[ 7 ]
initial
begin
	S1[7] = 1'b0;
end 
// S1[ 6 ]
initial
begin
	S1[6] = 1'b1;
	S1[6] = #3680000 1'b0;
end 
// S1[ 5 ]
initial
begin
	S1[5] = 1'b1;
	S1[5] = #3680000 1'b0;
end 
// S1[ 4 ]
initial
begin
	S1[4] = 1'b1;
	S1[4] = #3680000 1'b0;
end 
// S1[ 3 ]
initial
begin
	S1[3] = 1'b1;
	S1[3] = #3680000 1'b0;
end 
// S1[ 2 ]
initial
begin
	S1[2] = 1'b1;
	S1[2] = #3680000 1'b0;
end 
// S1[ 1 ]
initial
begin
	S1[1] = 1'b1;
	S1[1] = #3680000 1'b0;
end 
// S1[ 0 ]
initial
begin
	S1[0] = 1'b1;
	S1[0] = #3680000 1'b0;
end 
// S2[ 7 ]
initial
begin
	S2[7] = 1'b0;
end 
// S2[ 6 ]
initial
begin
	S2[6] = 1'b0;
end 
// S2[ 5 ]
initial
begin
	S2[5] = 1'b0;
end 
// S2[ 4 ]
initial
begin
	S2[4] = 1'b0;
end 
// S2[ 3 ]
initial
begin
	S2[3] = 1'b0;
end 
// S2[ 2 ]
initial
begin
	S2[2] = 1'b0;
end 
// S2[ 1 ]
initial
begin
	S2[1] = 1'b0;
end 
// S2[ 0 ]
initial
begin
	S2[0] = 1'b0;
end 

// FINISH
initial
begin
	FINISH = 1'b0;
	FINISH = #1120000 1'b1;
	FINISH = #160000 1'b0;
	FINISH = #480000 1'b1;
	FINISH = #160000 1'b0;
	FINISH = #160000 1'b1;
	FINISH = #160000 1'b0;
	FINISH = #2240000 1'b1;
	FINISH = #160000 1'b0;
	FINISH = #160000 1'b1;
	FINISH = #160000 1'b0;
	FINISH = #160000 1'b1;
	FINISH = #160000 1'b0;
end 

Secador_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CSK(CSK),
	.DATA_MOSI(DATA_MOSI),
	.FINISH(FINISH),
	.HALT(HALT),
	.S1(S1),
	.S2(S2),
	.sampler_tx(sampler)
);

Secador_vlg_check_tst tb_out(
	.DATA_MISO(DATA_MISO),
	.debug_pwm(debug_pwm),
	.debug_pwm_value(debug_pwm_value),
	.pin_name1(pin_name1),
	.Tempo(Tempo),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

